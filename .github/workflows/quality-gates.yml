name: Quality Gates

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  design-system-validation:
    name: Design System Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npm run type-check
        
      - name: Lint code
        run: npm run lint
        
      - name: Validate Acceptance Criteria
        run: npm run validate:acceptance-criteria
        
      - name: Run unit tests
        run: npm run test
        
      - name: Build Storybook
        run: npm run build:storybook
        
      - name: Run accessibility tests
        run: npm run test:e2e -- --grep="accessibility"
        
      - name: Upload validation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-reports
          path: reports/
          
      - name: Comment PR with validation results
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## ðŸš¨ Design System Validation Failed\n\n';
            
            // Check for token validation report
            if (fs.existsSync('reports/token-validation.json')) {
              const report = JSON.parse(fs.readFileSync('reports/token-validation.json', 'utf8'));
              if (report.summary.totalViolations > 0) {
                comment += `### ðŸŽ¨ Token Violations: ${report.summary.totalViolations}\n`;
                comment += `- Errors: ${report.summary.errors}\n`;
                comment += `- Warnings: ${report.summary.warnings}\n\n`;
                
                Object.entries(report.violations).slice(0, 5).forEach(([file, violations]) => {
                  comment += `**${file}**:\n`;
                  violations.slice(0, 3).forEach(v => {
                    comment += `- Line ${v.line}: ${v.message}\n`;
                  });
                  comment += '\n';
                });
              }
            }
            
            // Check for accessibility validation report
            if (fs.existsSync('reports/accessibility-validation.json')) {
              const report = JSON.parse(fs.readFileSync('reports/accessibility-validation.json', 'utf8'));
              if (report.summary.totalViolations > 0) {
                comment += `### â™¿ Accessibility Violations: ${report.summary.totalViolations}\n`;
                comment += `- Errors: ${report.summary.errors}\n`;
                comment += `- Warnings: ${report.summary.warnings}\n\n`;
                
                Object.entries(report.violations).slice(0, 5).forEach(([file, violations]) => {
                  comment += `**${file}**:\n`;
                  violations.slice(0, 3).forEach(v => {
                    comment += `- Line ${v.line}: ${v.message}\n`;
                  });
                  comment += '\n';
                });
              }
            }
            
            comment += '\n---\nPlease fix these issues before merging. Run `npm run validate` locally to see all violations.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: Build Storybook
        run: npm run build:storybook
        
      - name: Start Storybook server
        run: npx serve storybook-static -l 6006 &
        
      - name: Wait for Storybook
        run: npx wait-on http://localhost:6006
        
      - name: Run visual regression tests
        run: npm run test:e2e
        
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          
  performance-audit:
    name: Performance Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build library
        run: npm run build:lib
        
      - name: Analyze bundle size
        run: |
          echo "## Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Size | Gzipped |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|------|---------|" >> $GITHUB_STEP_SUMMARY
          
          for file in dist/*.js; do
            if [ -f "$file" ]; then
              size=$(du -h "$file" | cut -f1)
              gzipped=$(gzip -c "$file" | wc -c | numfmt --to=iec)
              filename=$(basename "$file")
              echo "| $filename | $size | $gzipped |" >> $GITHUB_STEP_SUMMARY
            fi
          done