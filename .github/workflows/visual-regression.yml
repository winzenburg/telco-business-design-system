name: Visual Regression Testing

on:
  pull_request:
    paths:
      - 'src/components/**'
      - 'packages/components/**'
      - 'stories/**'
      - 'packages/docs/stories/**'
      - 'tailwind.config.js'
      - 'packages/tokens/**'
  workflow_dispatch:
    inputs:
      update_baselines:
        description: 'Update baseline screenshots'
        required: false
        default: false
        type: boolean

jobs:
  visual-regression:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch enough history for accurate comparisons
          fetch-depth: 2
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Build Storybook
        run: npm run build-storybook
      
      - name: Start Storybook server
        run: |
          npx serve -l 6006 storybook-static &
          npx wait-on http://localhost:6006 --timeout 60000
      
      - name: Run visual regression tests
        id: vrt
        run: |
          if [[ "${{ github.event.inputs.update_baselines }}" == "true" ]]; then
            npm run test:vrt:update -- --project=chromium
          else
            npm run test:vrt -- --project=chromium
          fi
        continue-on-error: true
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: visual-regression-results
          path: |
            test-results/
            playwright-report/
            tests/e2e/**/*.png
          retention-days: 7
      
      - name: Generate VRT report
        if: always()
        run: |
          echo "## üì∏ Visual Regression Test Results" > vrt-comment.md
          echo "" >> vrt-comment.md
          
          if [[ "${{ steps.vrt.outcome }}" == "success" ]]; then
            echo "‚úÖ **All visual tests passed!**" >> vrt-comment.md
            echo "" >> vrt-comment.md
            echo "No visual regressions detected in this PR." >> vrt-comment.md
          else
            echo "‚ùå **Visual differences detected**" >> vrt-comment.md
            echo "" >> vrt-comment.md
            echo "This PR introduces visual changes. Please review the differences:" >> vrt-comment.md
            echo "" >> vrt-comment.md
            echo "1. üîç [View detailed test report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> vrt-comment.md
            echo "2. üìä Download the 'visual-regression-results' artifact to see image diffs" >> vrt-comment.md
            echo "3. üìù If changes are intentional, update baselines with:\" >> vrt-comment.md
            echo "   \`\`\`bash" >> vrt-comment.md
            echo "   npm run test:vrt:update" >> vrt-comment.md
            echo "   \`\`\`" >> vrt-comment.md
            echo "" >> vrt-comment.md
            echo "### Changed Components" >> vrt-comment.md
            echo "" >> vrt-comment.md
            
            # List changed files
            if [ -d "test-results" ]; then
              find test-results -name "*-diff.png" | head -10 | while read file; do
                component=$(basename "$file" | cut -d'-' -f1)
                echo "- üì∏ \`$component\`" >> vrt-comment.md
              done
            fi
            
            echo "" >> vrt-comment.md
            echo "### Review Guidelines" >> vrt-comment.md
            echo "" >> vrt-comment.md
            echo "- ‚úÖ **Intentional changes**: Update baselines and commit" >> vrt-comment.md
            echo "- ‚ùå **Unintentional changes**: Fix the issue before merging" >> vrt-comment.md
            echo "- ‚ùì **Unclear**: Ask for design review" >> vrt-comment.md
          fi
          
          echo "" >> vrt-comment.md
          echo "---" >> vrt-comment.md
          echo "*Generated by Visual Regression Testing workflow*" >> vrt-comment.md
      
      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('vrt-comment.md', 'utf8');
            
            // Find existing VRT comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('Visual Regression Test Results')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
      
      - name: Fail if visual tests failed
        if: steps.vrt.outcome == 'failure' && github.event.inputs.update_baselines != 'true'
        run: |
          echo "‚ùå Visual regression tests failed"
          echo "Review the differences and either fix the issues or update baselines if changes are intentional"
          exit 1
  
  # Separate job for updating baselines on main branch
  update-baselines:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium
      
      - name: Build Storybook
        run: npm run build-storybook
      
      - name: Start Storybook server
        run: |
          npx serve -l 6006 storybook-static &
          npx wait-on http://localhost:6006 --timeout 60000
      
      - name: Update visual baselines
        run: npm run test:vrt:update
      
      - name: Commit updated baselines
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [ -n "$(git status --porcelain)" ]; then
            git add tests/e2e/**/*.png
            git commit -m "chore: update visual regression baselines [skip ci]"
            git push
          else
            echo "No baseline changes to commit"
          fi